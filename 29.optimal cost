#include <stdio.h>
#include <limits.h>
float sum(float freq[], int i, int j) {
    float s = 0;
    for (int k = i; k <= j; k++) {
        s += freq[k];
    }
    return s;
}
void optimalBST(int keys[], float freq[], int n) {
    float cost[n][n];
    float weight[n][n];
    for (int i = 0; i < n; i++) {
        cost[i][i] = freq[i];
        weight[i][i] = freq[i];
    }
    for (int l = 2; l <= n; l++) {
        for (int i = 0; i <= n - l; i++) {
            int j = i + l - 1;
            cost[i][j] = INT_MAX;
            weight[i][j] = sum(freq, i, j);
            for (int r = i; r <= j; r++) {
                float c = ((r > i) ? cost[i][r - 1] : 0) + ((r < j) ? cost[r + 1][j] : 0) + weight[i][j];
                if (c < cost[i][j]) {
                    cost[i][j] = c;
                }
            }
        }
    }
    printf("Optimal cost: %f\n", cost[0][n - 1]);
}
int main() {
    int keys[] = {10, 12, 20};
    float freq[] = {0.34, 0.08, 0.50};
    int n = sizeof(keys) / sizeof(keys[0]);
    optimalBST(keys, freq, n);
    return 0;
}
output
Optimal cost: 1.420000
